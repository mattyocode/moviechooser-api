name: CI
on:
  push:
    branches: [main, "*"]

  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  ACTOR: ${{ github.actor }}
  WEB_IMAGE: ghcr.io/${{ github.actor }}/${{ github.repository }}
  IMAGE_NAME: ${{ github.repository }}
  SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_SETTINGS_MODULE: config.settings.prod
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DJANGO_PORT: 8000

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEBUG: 0
      SECRET_KEY: tempkeyforbuild
      DJANGO_ALLOWED_HOSTS: localhost 127.0.0.1
      SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
      SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
      SQL_USER: ${{ secrets.SQL_USER }}
      SQL_PASSWORD: ${{ secrets.SQL_PASSWORD}}
      SQL_HOST: localhost
      SQL_PORT: 5432
      DATABASE: postgres

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Add variables to .env
        run: |
          echo $pwd
          pwd
          ls
          echo DEBUG=0 >> ./app/.env
          echo SECRET_KEY=testsecretkey >> ./app/.env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> ./app/.env
          echo SQL_ENGINE=${{ secrets.SQL_ENGINE }} >> ./app/.env
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> ./app/.env
          echo SQL_USER=${{ secrets.SQL_USER }} >> ./app/.env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD}} >> ./app/.env
          echo SQL_HOST=${{ secrets.SQL_HOST}} >> ./app/.env
          echo SQL_PORT=${{ secrets.SQL_PORT}} >> ./app/.env
          echo DATABASE=${{ secrets.DATABASE}} >> ./app/.env
          ls

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.4.1
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.WEB_IMAGE }}
          # flavor: |
          #   latest=false
          # tags: |
          #   type=raw,value=latest

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: app
          file: app/Dockerfile.prod
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          build-args: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}

      - name: Show image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      DEBUG: 0
      SECRET_KEY: tempkeyforbuild
      DJANGO_ALLOWED_HOSTS: localhost 127.0.0.1
      SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
      SQL_DATABASE: ci_db_test
      SQL_USER: postgres
      SQL_PASSWORD: postgres
      SQL_HOST: localhost
      SQL_PORT: 5432
      DATABASE: postgres
      DJANGO_SETTINGS_MODULE: config.settings.prod

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ci_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add variables to .env
      run: |
        ls
        echo SECRET_KEY=secretkeyfortests >> ./app/env_file
        echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> ./app/env_file
        echo SQL_ENGINE=${{ secrets.SQL_ENGINE }} >> ./app/env_file
        echo SQL_DATABASE=ci_db_test >> ./app/env_file
        echo SQL_USER=postgres >> ./app/env_file
        echo SQL_PASSWORD=postgres >> ./app/env_file
        echo SQL_HOST=postgres >> ./app/env_file
        echo SQL_PORT=5432 >> ./app/env_file
        echo DATABASE=postgres >> ./app/env_file
        echo DJANGO_PORT=8000 >> ./app/env_file
        echo DJANGO_SETTINGS_MODULE=config.settings.prod >> ./app/env_file
        ls

      - name: Branch name if push
        if: github.event_name == 'push'
        run: |
          echo "BRANCH_REF=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
          ${{ env.BRANCH_REF}}

      - name: Branch name if pull_request
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH_REF=${{ github.head_ref }}" >> $GITHUB_ENV
          ${{ env.BRANCH_REF}}

      - name: Pull image and run container
        run: |
          docker pull ${{ env.WEB_IMAGE }}:${{ env.BRANCH_REF}}
          docker run -d -p 8000:8000 -e PORT=$PORT --env-file=env_file \
            --name latest_image ${{ env.WEB_IMAGE }}:"${{ env.BRANCH_REF}}"

      - name: Run tests
        run: |
          echo SECRET_KEY $SECRET_KEY
          echo SQL_ENGINE $SQL_ENGINE
          echo SQL_DATABASE $SQL_DATABASE
          echo SQL_USER $SQL_USER
          echo SQL_PASSWORD $SQL_PASSWORD
          echo SQL_HOST $SQL_HOST
          echo SQL_PORT $SQL_PORT
          echo DATABASE $DATABASE
          echo DJANGO_PORT $DJANGO_PORT
          echo DJANGO_SETTINGS_MODULE $DJANGO_SETTINGS_MODULE
          pwd
          ls -a
          docker exec -u root -e DEBUG=1 latest_image pytest -vv -p no:cacheprovider -p no:warnings --cov=.
          docker exec -u root latest_image flake8
          docker exec -u root latest_image black --check --exclude=migrations .
          docker exec -u root latest_image isort . --check-only
          docker exec -u root -e DEBUG=0 latest_image python manage.py check --deploy --fail-level=WARNING
